#!/bin/sh

set -e

. "$(dirname $0)/config.sh"

for ARCH in $ARCHS
do
     ISO="${ISOPREFIX}-ubuntu-$VERSION-$DISTRO-$ARCH.iso"
     VBOX="${LABEL}-ubuntu-$VERSION-$DISTRO-$ARCH"
     NETBOOT="ubuntu-$VERSION-$ARCH-netboot"
     NETBOOT_FILE="${NETBOOT}.tar.gz"
     NETBOOT_DIR="${VBOX_CONF_HOME}/ubuntu-$VERSION_NAME-netboot"
     NETBOOT_URI="http://archive.ubuntu.com/ubuntu/dists/$VERSION_NAME/main/installer-$ARCH/current/images/netboot/netboot.tar.gz"
     CURR_DIR=$(pwd)

     ## Set TFTP Folder based on ARCH
     ln -nfs ${NETBOOT_DIR} ${VBOX_CONF_HOME}/TFTP

     # Check if the vm already exists
     set +e
     VM_EXISTS=$(VBoxManage list vms | grep -c "${VBOX}")
     set -e

     if [ ${VM_EXISTS} -lt 1 ]; then
     
        [ ${VBOX_PXE_BUILD} -eq 1 ] && { pxe_boot_order="--boot1 disk --boot2 net"; } || pxe_boot_order=""

	# Create and configure a virtual machine through VirtualBox.
	VBoxManage createvm \
		--name "$VBOX" \
		--basefolder "$PWD" \
		--register \
		|| true
	VBoxManage modifyvm "$VBOX" \
		--ostype "Ubuntu$([ "$ARCH" = "i386" ] || echo _64)" \
		--memory 448 \
		--vram 12 \
		--acpi on --ioapic on \
		--cpus 1 \
		--pae "$([ "$ARCH" = "i386" ] && echo on || echo off)" \
		--hwvirtex on \
		--hwvirtexexcl off \
		--nestedpaging on \
		--accelerate3d off \
		--nic1 nat \
		--natpf1 guestssh,tcp,,2222,,22 \
		--audio none \
		--clipboard disabled \
		--usb off --usbehci off \
		--vrde off \
		${pxe_boot_order} \
		--teleporter off

	VBoxManage storagectl "$VBOX" \
		--name IDE \
		--add ide

	# Mount a virtual hard disk.
	VBoxManage createhd \
		--filename "$PWD/$VBOX/$VBOX.vmdk" \
		--size 40000 \
		--format VMDK \
		|| true

	## Check if the current dir for vagrant drives is hosted on an ext4 fs. If so, ensure hostiocache is enabled to avoid corruption
	[ ${HOSTIOCACHE} ] || {
          vbox_hd_dir="$PWD/$VBOX/";
          HOSTIOCACHE="";
	  for dir in ${vbox_hd_dir}; do
	    vbox_hd_dir_disk=$(df ${dir} | tail -n 1 | cut -d" " -f1);
	    vbox_hd_dir_fs="$(grep ${vbox_hd_dir_disk} /proc/mounts | awk '{ print $3 }')"
	    [ "$vbox_hd_dir_fs" = "ext4" ] && {
              echo "Auto enabling HOSTIOCACHE due ext4 [${dir}]";
	      HOSTIOCACHE=" --hostiocache on ";
	      break;
	    }
	  done
	}

	VBoxManage storagectl "$VBOX" \
		--name SATA ${HOSTIOCACHE} \
		--add sata
	VBoxManage storageattach "$VBOX" \
		--storagectl SATA \
		--port 0 --device 0 \
		--type hdd --medium "$PWD/$VBOX/$VBOX.vmdk"

	# Start the virtual machine and the OS installation.  This will take
	# a while so this time it gets a GUI.  Spin slowly until SSH is usable.
     fi

        if [ ${VBOX_PXE_BUILD} -lt 1 ]; then 
  	  # Mount the custom installation ISO.
  #	  VBoxManage openmedium dvd "$PWD/$ISO" || true

	  VBoxManage storageattach "$VBOX" \
		--storagectl IDE \
		--port 1 --device 0 \
		--type dvddrive --medium "$PWD/$ISO"
	else
	  VBoxManage storageattach "$VBOX" \
		--storagectl IDE \
		--port 1 --device 0 \
		--type dvddrive --medium "$VBOX_GUEST_ADDITIONS"
	
	fi

     set +e
     VM_RUNS=$(VBoxManage list runningvms | grep -c "${VBOX}")
     set -e

     if [ ${VM_RUNS} -lt 1 ]; then
     
       ## Start a webserver for the preseed files.
       [ ${VBOX_PXE_BUILD} -eq 1 -a ${PRESEED_WEBSERVER} -eq 1 ] && {
         echo -n "Starting webserver for preseed files..."
         cd $PRESEED_PATH && python -m SimpleHTTPServer &
	 webserver_PID=$!
	 echo "done"
       }
       
	VBoxManage startvm "$VBOX" --type gui
	## Set better perms on the private key to avoid ssh abort
	chmod 600 ${PRIVATE_KEY}
#	VBoxManage modifyvm "${VBOX}" \
#		--boot1 disk 
	until eval "$SSH exit"
	do
		sleep 60
	done
     fi
	# Attach the VBoxGuestAdditions ISO, implicitly detaching the custom
	# installation ISO in the process.  Install the additions and empty
	# the drive.
        if [ ${VBOX_PXE_BUILD} -lt 1 ]; then 
  	  VBoxManage storageattach "$VBOX" \
		--storagectl IDE \
		--port 1 --device 0 \
		--type dvddrive --medium "$VBOX_GUEST_ADDITIONS"
	fi
	
	eval "$SSH \"
		set -e
		[ $(lsmod | grep -c vboxguest) -eq 1 ] && exit 0;
		export DEBCONF_FRONTEND=noninteractive
		sudo -E apt-get -y install linux-headers-\\\$(uname -r) build-essential
		[ -d /media/cdrom ] || sudo mkdir -p /media/cdrom
		until sudo mount /dev/cdrom /media/cdrom
		do
			sleep 1
		done
		[[ -e /media/cdrom/VBoxLinuxAdditions.run ]] && {
		  sudo /media/cdrom/VBoxLinuxAdditions.run force
		} || {
  		  sudo /media/cdrom/VBoxLinuxAdditions-$([ "$ARCH" = "i386" ] \
		 	  && echo x86 \
			  || echo amd64
		  ).run force --nox11
		}
		sudo umount /media/cdrom
	\""
	VBoxManage storageattach "$VBOX" \
		--storagectl IDE \
		--port 1 --device 0 \
		--type dvddrive --medium emptydrive
	
        [ ${VBOX_PXE_BUILD} -eq 1 -a ${PRESEED_WEBSERVER} -eq 1 ] && {
          echo -n "Stopping webserver for preseed files..."
          kill ${webserver_PID}
	  wait && echo "done"
	}
	# Shutdown the virtual machine.
	eval "$SSH \"sudo shutdown -h now\""
	until VBoxManage showvminfo "$VBOX" | grep "^State: *powered off"
	do
		sleep 1
	done
	VBoxManage snapshot "${VBOX}" take "AUTO_${LABEL}_base_build__000001" --description "Snapshot taken after initial build to be able to restore back when recreating vagrant boxes"
done
